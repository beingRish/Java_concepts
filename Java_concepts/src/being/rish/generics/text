Generic types allow you to define a class, interface or method with placeholders(type parameters) for the data types they will work with.

T: Type
E: Element(used in collections)
K: Key(used in maps)
V: value(used in maps)
N: Number

                                            WILDCARDS IN GENERICS
In Java Generics, wildcards (?) are a special kind of type argument that can be used in method arguments or class definitions to represent an unknown type.
They allow for more flexible and dynamic code by letting the type be specified later or be more loosely defined.

                                            Generic Exceptions
An exception is an event that occurs during the exception of a program that disrupts its normal flow.
Java allows us to define our own exception by extending the Exception class or any of its subclasses.
However, when it comes to making exceptions generic, things get a bit more complicated due to the nature of Java's type erasure and restrictions on generics.

Java does not support generic exceptions due to type erasure. Type erasure means that generic type information is removed at runtime.
Since exceptions are closely tied to runtime operations(like catching them in try-catch blocks), having generic exceptions wouldn't work as expected.
For example, If you had an exception like MyGenericException<T>, you wouldn't be able to catch it with a specific type parameter because that type information would be erased at runtime.
